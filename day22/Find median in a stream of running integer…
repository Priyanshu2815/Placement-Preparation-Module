#include <iostream>
#include <queue>

using namespace std;

class MedianFinder {
  priority_queue<int, vector<int>, greater<int>> minHeap;
  priority_queue<int> maxHeap;

public:
  MedianFinder() {}

  void addNum(int num) {
    if (maxHeap.size() == 0 || num <= maxHeap.top()) {
      maxHeap.push(num);
    } else {
      minHeap.push(num);
    }
    if (maxHeap.size() - minHeap.size() > 1) {
      int temp = maxHeap.top();
      maxHeap.pop();
      minHeap.push(temp);
    } else if (minHeap.size() - maxHeap.size() > 1) {
      int temp = minHeap.top();
      minHeap.pop();
      maxHeap.push(temp);
    }
  }

  double findMedian() {
    if (maxHeap.size() == minHeap.size()) {
      return (maxHeap.top() + minHeap.top()) / 2.0;
    } else {
      return maxHeap.top();
    }
  }
};

int main() {
  MedianFinder medianFinder;
  medianFinder.addNum(1);
  medianFinder.addNum(2);
  medianFinder.addNum(3);
  medianFinder.addNum(4);

  cout << medianFinder.findMedian() << endl;

  return 0;
}
