#include <iostream>
#include <vector>

using namespace std;

int minCostPath(vector<vector<int>>& matrix) {
  int n = matrix.size();
  int m = matrix[0].size();


  vector<vector<int>> dp(n, vector<int>(m, INT_MAX));


  for (int i = 0; i < n; i++) {
    dp[i][0] = matrix[i][0];
  }

  for (int i = 0; i < m; i++) {
    dp[0][i] = matrix[0][i];
  }


  for (int i = 1; i < n; i++) {
    for (int j = 1; j < m; j++) {
      dp[i][j] = min(dp[i - 1][j] + matrix[i][j], dp[i][j - 1] + matrix[i][j]);
    }
  }

  return dp[n - 1][m - 1];
}

int main() {
  vector<vector<int>> matrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};

  int minCost = minCostPath(matrix);

  cout << minCost << endl;

  return 0;
}
