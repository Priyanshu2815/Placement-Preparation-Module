#include <iostream>
#include <vector>

using namespace std;

int knapsack(vector<int>& profits, vector<int>& weights, int capacity) {
  int n = profits.size();

  vector<vector<int>> dp(n + 1, vector<int>(capacity + 1, 0));


  for (int i = 0; i <= n; i++) {
    for (int j = 0; j <= capacity; j++) {
      if (i == 0 || j == 0) {
        dp[i][j] = 0;
      } else if (weights[i - 1] <= j) {
        dp[i][j] = max(profits[i - 1] + dp[i - 1][j - weights[i - 1]], dp[i - 1][j]);
      } else {
        dp[i][j] = dp[i - 1][j];
      }
    }
  }

  return dp[n][capacity];
}

int main() {
  vector<int> profits = {1, 6, 10, 12};
  vector<int> weights = {1, 2, 3, 5};
  int capacity = 7;

  int knapsackProfit = knapsack(profits, weights, capacity);

  cout << knapsackProfit << endl;

  return 0;
}
