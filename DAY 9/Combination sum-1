#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

void findAllCombinations(vector<int> &arr, int target, vector<vector<int>> &combinations) {
  if (target == 0) {
    combinations.push_back(vector<int>());
    return;
  }

  for (int i = 0; i < arr.size(); i++) {
    if (target - arr[i] >= 0) {
      findAllCombinations(arr, target - arr[i], combinations);
      vector<int> newCombination = combinations.back();
      newCombination.push_back(arr[i]);
      combinations.push_back(newCombination);
    }
  }
}

vector<vector<int>> findUniqueCombinations(vector<int> &arr, int target) {
  vector<vector<int>> combinations;
  findAllCombinations(arr, target, combinations);
  sort(combinations.begin(), combinations.end());
  for (int i = 0; i < combinations.size() - 1; i++) {
    if (combinations[i] == combinations[i + 1]) {
      combinations.erase(combinations.begin() + i);
    }
  }

  return combinations;
}

int main() {
  vector<int> arr = {1, 1, 2, 3, 5};
  int target = 8;
  vector<vector<int>> combinations = findUniqueCombinations(arr, target);

  for (vector<int> combination : combinations) {
    for (int num : combination) {
      cout << num << " ";
    }
    cout << endl;
  }

  return 0;
}
