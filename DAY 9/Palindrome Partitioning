#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

bool isPalindrome(string str) {
  int n = str.length();
  for (int i = 0; i < n / 2; i++) {
    if (str[i] != str[n - 1 - i]) {
      return false;
    }
  }

  return true;
}

void findAllPalindromicPartitions(string str, int index, vector<vector<string>> &partitions) {
  if (index == str.length()) {
    partitions.push_back(vector<string>());
    return;
  }

  for (int i = index; i < str.length(); i++) {
    if (isPalindrome(str.substr(index, i - index + 1))) {
      vector<string> newPartition = partitions.back();
      newPartition.push_back(str.substr(index, i - index + 1));
      findAllPalindromicPartitions(str, i + 1, partitions);
    }
  }
}

vector<vector<string>> findPalindromicPartitions(string str) {
  vector<vector<string>> partitions;
  findAllPalindromicPartitions(str, 0, partitions);

  return partitions;
}

int main() {
  string str = "abba";
  vector<vector<string>> partitions = findPalindromicPartitions(str);

  for (vector<string> partition : partitions) {
    for (string s : partition) {
      cout << s << " ";
    }
    cout << endl;
  }

  return 0;
}
