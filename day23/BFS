#include <iostream>
#include <vector>

using namespace std;

vector<int> bfs(vector<vector<int>>& adj, int start) {
  vector<bool> visited(adj.size(), false);
  vector<int> result;

  queue<int> q;
  q.push(start);

  while (!q.empty()) {
    int current = q.front();
    q.pop();

    if (!visited[current]) {
      visited[current] = true;
      result.push_back(current);

      for (int neighbor : adj[current]) {
        if (!visited[neighbor]) {
          q.push(neighbor);
        }
      }
    }
  }

  return result;
}

int main() {
  vector<vector<int>> adj = {{1, 2}, {0, 2, 3}, {0, 1}, {3}};
  int start = 0;

  vector<int> result = bfs(adj, start);

  for (int i = 0; i < result.size(); i++) {
    cout << result[i] << " ";
  }

  cout << endl;

  return 0;
}
