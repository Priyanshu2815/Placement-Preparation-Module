#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

bool isSafe(vector<int> &board, int row, int col) {
  for (int i = 0; i < row; i++) {
    if (board[i] == col || abs(board[i] - col) == abs(i - row)) {
      return false;
    }
  }

  return true;
}

void solveNQueens(vector<int> &board, int row, vector<vector<char>> &solutions) {
  if (row == board.size()) {
    solutions.push_back(board);
    return;
  }

  for (int col = 0; col < board.size(); col++) {
    if (isSafe(board, row, col)) {
      board[row] = col;
      solveNQueens(board, row + 1, solutions);
    }
  }
}

vector<vector<char>> solveNQueens(int n) {
  vector<vector<char>> solutions;
  vector<int> board(n, -1);
  solveNQueens(board, 0, solutions);

  return solutions;
}

int main() {
  int n = 4;
  vector<vector<char>> solutions = solveNQueens(n);

  for (vector<char> solution : solutions) {
    for (char c : solution) {
      cout << c << " ";
    }
    cout << endl;
  }

  return 0;
}
