#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

bool isSafe(vector<vector<int>> &board, int row, int col, int num) {
  for (int i = 0; i < 9; i++) {
    if (board[row][i] == num) {
      return false;
    }
  }

  for (int i = 0; i < 9; i++) {
    if (board[i][col] == num) {
      return false;
    }
  }

  int x = row / 3;
  int y = col / 3;
  for (int i = x * 3; i < x * 3 + 3; i++) {
    for (int j = y * 3; j < y * 3 + 3; j++) {
      if (board[i][j] == num) {
        return false;
      }
    }
  }

  return true;
}

bool solveSudoku(vector<vector<int>> &board) {
  for (int row = 0; row < 9; row++) {
    for (int col = 0; col < 9; col++) {
      if (board[row][col] == 0) {
        for (int num = 1; num <= 9; num++) {
          if (isSafe(board, row, col, num)) {
            board[row][col] = num;
            if (solveSudoku(board)) {
              return true;
            } else {
              board[row][col] = 0;
            }
          }
        }

        return false;
      }
    }
  }

  return true;
}

int main() {
  vector<vector<int>> board = {
      {3, 0, 6, 5, 0, 8, 4, 0, 0},
      {5, 2, 0, 0, 0, 0, 0, 0, 0},
      {0, 8, 7, 0, 0, 0, 0, 3, 1},
      {0, 0, 3, 0, 1, 0, 0, 8, 0},
      {9, 0, 0, 8, 6, 3, 0, 0, 5},
      {0, 5, 0, 0, 9, 0, 6, 0, 0},
      {1, 0, 0, 0, 0, 0, 2, 5, 0},
      {0, 0, 0, 0, 0, 0, 0, 7, 4},
      {0, 0, 5, 2, 0, 6, 3, 0, 0}};

  if (solveSudoku(board)) {
    for (vector<int> row : board) {
      for (int num : row) {
        cout << num << " ";
      }
      cout << endl;
    }
  } else {
    cout << "No solution exists" << endl;
  }

  return 0;
}
