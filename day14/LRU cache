#include <iostream>
#include <unordered_map>
#include <list>

using namespace std;

class LRUCache {
private:
  int capacity;
  unordered_map<int, list<int>::iterator> map;
  list<int> cache;

public:
  LRUCache(int capacity) {
    this->capacity = capacity;
  }

  void put(int key, int value) {
    if (map.find(key) != map.end()) {
      cache.erase(map[key]);
    } else if (cache.size() == capacity) {
      int least_recently_used_key = cache.back();
      cache.pop_back();
      map.erase(least_recently_used_key);
    }

    cache.push_front(value);
    map[key] = cache.begin();
  }

  int get(int key) {
    if (map.find(key) == map.end()) {
      return -1;
    }

    int value = *map[key];
    cache.erase(map[key]);
    cache.push_front(value);
    map[key] = cache.begin();

    return value;
  }
};

int main() {
  LRUCache cache(3);
  cache.put(1, 1);
  cache.put(2, 2);
  cache.put(3, 3);
  cout << cache.get(1) << endl; // 1
  cache.put(4, 4);
  cout << cache.get(2) << endl; // -1
  cout << cache.get(3) << endl; // -1
  cout << cache.get(4) << endl; // 4

  return 0;
}
