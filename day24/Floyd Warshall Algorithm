#include <iostream>
#include <vector>

using namespace std;

void floydWarshall(vector<vector<int>>& adj, vector<vector<int>>& distances) {
  for (int k = 0; k < adj.size(); k++) {
    for (int i = 0; i < adj.size(); i++) {
      for (int j = 0; j < adj.size(); j++) {
        if (distances[i][j] > distances[i][k] + distances[k][j]) {
          distances[i][j] = distances[i][k] + distances[k][j];
        }
      }
    }
  }
}

int main() {
  vector<vector<int>> adj = {{0, 1, 1}, {0, 2, 4}, {1, 3, 2}, {2, 3, 3}};
  vector<vector<int>> distances(adj.size(), vector<int>(adj.size(), INT_MAX));

  floydWarshall(adj, distances);

  for (int i = 0; i < distances.size(); i++) {
    for (int j = 0; j < distances[i].size(); j++) {
      cout << distances[i][j] << " ";
    }
    cout << endl;
  }

  return 0;
}
