#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

void prim(vector<vector<pair<int, int>>>& adj, vector<int>& mst, int start) {
  mst.clear();


  set<int> visited;
  visited.insert(start);

 
  priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
  for (pair<int, int> edge : adj[start]) {
    pq.push(edge);
  }


  while (!pq.empty()) {
    pair<int, int> edge = pq.top();
    pq.pop();

    int u = edge.first;
    int v = edge.second;
.
    if (visited.find(v) != visited.end()) {
      continue;
    }

    mst.push_back(edge);
    visited.insert(v);


    for (pair<int, int> neighbor : adj[v]) {
      if (visited.find(neighbor.first) == visited.end()) {
        pq.push(neighbor);
      }
    }
  }
}

int main() {
  vector<vector<pair<int, int>>> adj = {{0, 1, 1}, {0, 2, 4}, {1, 3, 2}, {2, 3, 3}};
  vector<int> mst;

  prim(adj, mst, 0);

  for (int edge : mst) {
    cout << edge << endl;
  }

  return 0;
}
