#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

void kruskal(vector<vector<pair<int, int>>>& adj, vector<pair<int, int>>& mst) {
  mst.clear();


  priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
  for (int i = 0; i < adj.size(); i++) {
    for (pair<int, int> edge : adj[i]) {
      pq.push(edge);
    }
  }

  while (!pq.empty()) {
    pair<int, int> edge = pq.top();
    pq.pop();

    int u = edge.first;
    int v = edge.second;


    if (find(mst.begin(), mst.end(), edge) != mst.end()) {
      continue;
    }

    mst.push_back(edge);
  }
}

int main() {
  vector<vector<pair<int, int>>> adj = {{0, 1, 1}, {0, 2, 4}, {1, 3, 2}, {2, 3, 3}};
  vector<pair<int, int>> mst;

  kruskal(adj, mst);

  for (pair<int, int> edge : mst) {
    cout << edge.first << " " << edge.second << endl;
  }

  return 0;
}
