#include <iostream>
#include <vector>

using namespace std;

bool findTwoSum(vector<int> &nums, int target) {
  unordered_map<int, int> seen;

  for (int i = 0; i < nums.size(); i++) {
    int complement = target - nums[i];
    if (seen.find(complement) != seen.end()) {
      return true;
    }
    seen[nums[i]] = i;
  }

  return false;
}

vector<int> findTwoSumIndices(vector<int> &nums, int target) {
  unordered_map<int, int> seen;

  vector<int> indices;

  for (int i = 0; i < nums.size(); i++) {
    int complement = target - nums[i];
    if (seen.find(complement) != seen.end()) {
      indices.push_back(i);
      indices.push_back(seen[complement]);
      return indices;
    }
    seen[nums[i]] = i;
  }

  return {-1, -1};
}

int main() {
  vector<int> nums = {2, 7, 11, 15};
  int target = 9;

  bool hasTwoSum = findTwoSum(nums, target);
  if (hasTwoSum) {
    cout << "There are two numbers whose sum is equal to " << target << endl;
  } else {
    cout << "There are no two numbers whose sum is equal to " << target << endl;
  }

  vector<int> indices = findTwoSumIndices(nums, target);
  if (indices[0] == -1) {
    cout << "There are no two numbers whose sum is equal to " << target << endl;
  } else {
    cout << "The indices of the two numbers are: " << indices[0] << ", " << indices[1] << endl;
  }

  return 0;
}
